// import store from './store';

let transform = {
    keyword:'@conference.',
    checkType(str){
        let kw=this.keyword;
        if(str.indexOf(kw)!==-1){
            return 'group';
        }
        return 'one';
    },
    getConfigCmd(cmd) {
       if(cmd.trim()==='help'){
           return 'help';
       }
       return null;
    },
    splitCmd(cmd){
        if(typeof cmd==='string'){
            let cmdArr=cmd.split(' ');
            let out=[];
            cmdArr.forEach((val)=>{
                if(val.trim()){
                    out.push(val);
                }
            });
            return {
                command:out[0],
                hint:out.slice(1)
            }
            // return out;
        }
        else{
            return {};
        }
    },
    get({ body, headers, appKey, verification_token }) {
        let {
            authorization,
            clientid
        }=headers;
        if (!(authorization === verification_token && appKey === clientid)){
            return {
                status:false,
                errorMessage:`auth fail`
            };
        }
        let { map } = this;
        let { payload, event } = body;
        if (typeof payload !== 'object') {
            return {status:false,errorMessage:'payload format error'};
        }
        let { bot_name,toJid,cmd} = payload;
        // let { Authorization } = headers;
        if (!(event in map)) {
            return { status: false, errorMessage: '' };
        }

        //not trigger specific name.
        let eventType = map[event];

        if (bot_name) {
            eventType = eventType + '_' + bot_name;
        }
        let type=this.checkType(toJid);
        let innerCmd = this.getConfigCmd(cmd);
        return {status:true,result:{
            cmdOption: this.splitCmd(cmd),
            type,
            message:cmd,
            innerCmd,
            value: eventType,
            data: payload
        }};
    },
    map: {
        'interactive_message_edit': 'edit',
        'interactive_message_action': 'button',
        'interactive_message_select': 'dropdown',
        'bot_notification': 'notification'
    }
};

export default transform;