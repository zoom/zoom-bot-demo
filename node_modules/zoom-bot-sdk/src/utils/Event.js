import branch from './branch';
// import debug from './debug';
class Event {
    constructor() {
        this.eventStore = {//not set valid 
            
        };
    }
    off(eventType) {//only support single callback
        let { eventStore } = this;
        if (eventType in eventStore) {
            eventStore[eventType] = {};
        }
    }
    on(eventType, callback) {
        if (typeof callback !== 'function') {
            return;
        }
        let { eventStore } = this;
        if (eventType in eventStore) {
            eventStore[eventType].push({ callback });
        }
        else {
            eventStore[eventType] = [{ callback }];
        }
        return this;
    }
    trigger(eventType, data) {//loop multiple callback
        let { eventStore } = this;
        // return new Promise((resolve, reject) => {
            if (eventType in eventStore) {
                let actions = eventStore[eventType];
                let lg=actions.length;
                if (lg===1){
                    actions[0].callback(data);
                }
                else if(lg>1){
                    actions = actions.map((ac) => { let obj = Object.assign({ props: [data] }, ac); return obj; });
                    branch(actions)
                        .then(() => {
                            //
                        })
                        .catch(() => {
                            //
                        });
                }
            }
            else{
                // reject(`not bind ${eventType} event`);
            }
        // });
    }
};



export default Event;