let { assert, expect } = require('chai');
// let main = require('../../src/index');
const nodepath = require('path');
// const cwd = process.cwd();
// const inquirer = require('inquirer');
const fs = require('fs-extra');

let { oauth2, client, setting } = require('../development');
setting.setUrl('https://dev.zoom.us');
let dataPath = nodepath.join(__dirname, './data.json');
let store = fs.readJsonSync(dataPath);

let jiraBot = client(
  store.robot_jid,
  store.verification_token,
  store.robot_jid
);

let oauth2Client = oauth2(store.appKey, store.appSecret, store.redirect_uri);

// oauth2Client.on('tokens', (tokens) => {
//     console.log(tokens, 999)
//     store.tokens = tokens;
// });

// oauth2Client.on('clientTokens', (tokens) => {
//     console.log(tokens.access_token, 11111);
// });

describe('oauth2', function() {
  describe('#connect', function() {
    this.timeout(6000);
    it(`refresh&tokens`, async function() {
      // let result = await inquirer.prompt([{
      //     name: 'data',
      //     message: 'input refresh_token code'
      // }]);
      try {
        let connection = await oauth2Client.connectByRefresh(
          store.tokens.refresh_token
        );
        let tokens = connection.getTokens();
        store.tokens = tokens;
        fs.writeJsonSync(dataPath, store);
        expect(tokens.access_token).to.be.an('string');
        // expect(tokens).to.have.property('access_tokens');
        let connection2 = oauth2Client.connectByTokens(tokens);
        let newTokens = connection2.getTokens();
        assert.equal(newTokens.access_token, tokens.access_token);
      } catch (e) {
        console.log(e);
        expect(e).to.be.an('object');
      }
    });

    it('clientToken', async function() {
      try {
        let connection = oauth2Client.connect();
        let tokens = await connection.requestClientTokens();
    
        expect(tokens.access_token).to.be.an('string');
        // expect(tokens).to.have.property('access_tokens');
      } catch (e) {
        console.log(e);
        expect(e).to.be.an('object');
      }
    });
  });

  describe('client', function() {
    this.timeout(20000);

    describe('#action', function(done) {
      describe('#getUser', function() {
        it('account_id', async function() {
          try {
            //   let body = req.body;
            //   let email = body.email || '';
            let connection = oauth2Client.connectByTokens(store.tokens);
            let userApp = jiraBot.create({ auth: connection });
            let userInfo = await userApp.getUser();
          } catch (e) {
            console.log(e);
            expect(e).to.be.an('object');
          }
        });
      });

      describe('#getUser&&channelList&&sendMessage', function() {
        it('account_id&&kokoko', async function() {
          try {
            //   let body = req.body;
            //   let email = body.email || '';
            let connection = oauth2Client.connectByTokens(store.tokens);
            let userApp = jiraBot.create({ auth: connection });
            let userInfo = await userApp.getUser();
            let channelList = await userApp.channelList(userInfo.id);
            let obj = channelList[1];
            let { group_jid } = obj;
            let msg = await userApp.sendMessage({
              to_jid: group_jid,
              account_id: userInfo.account_id,
              body: store.message.body,
              header: store.message.header
            });
            expect(msg.robot_jid).to.be.an('string');
            // done();
          } catch (e) {
            console.log(e);
            expect(e).to.be.an('object');
            // done();
          }
        });
      });
    });
  });
});
