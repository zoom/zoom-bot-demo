//this test not include expect,future will add it

const nodepath = require('path');
require('dotenv').config({
  path: nodepath.join(__dirname, `./${process.env.NODE_ENV}.env`)
});
let { assert, expect } = require('chai');
// const fs = require('fs-extra');
// const spawn = require('cross-spawn');
let { oauth2, client, setting } = require('../production');
// setting.setUrl(process.env.url);
let app = require('./app');

let timeout = function(t) {
  return new Promise(resolve => {
    setTimeout(function() {
      resolve();
    }, t);
  });
};

describe('app action', function() {
  let zoomBot;
  let oauth2Client;
  let connectByCode;
  let userApp;

  before(function() {
    oauth2Client = oauth2(
      process.env.clientId,
      process.env.clientSecret,
      process.env.redirect
    );
    zoomBot = client(
      process.env.clientId,
      process.env.verificationToken,
      process.env.botJid
    ).commands([
      {
        command: 'create',
        description: 'create a new meeting',
        hint: ' <userName> <date>'
      }
    ])
    .defaultAuth(oauth2Client.connect());
  });

  describe('event', async function() {
    it(`ready`, async function() {
      let foxApp = null;
      //oauth
      app.all('/api/oauth', async function(req, res) {
        try {
          connection = await oauth2Client.connectByCode(req.query.code);
          //change foxApp to current oauth2 user
          foxApp = zoomBot.create({ auth: connection });
          res.send('ok');
        } catch (e) {
          res.send(e);
        }
      });
      //message
      app.all('/api/message', async function(req, res) {
        let { body, headers } = req;
        res.send('ok');
        let data=zoomBot.parse({body,headers});
        
        zoomBot
          .handle({ body, headers },function(err){

          });
      });

      zoomBot.on('commands', async function(e) {
        let { payload, data, type, command, message } = e; //origin message from IM is message
        let { toJid: to_jid, accountId: account_id, name } = payload;
        try {//expired time is outtime,requres access_ by ref
          let userInfo = await foxApp.getUser();
          console.log(userInfo, 111);
          let channelList = await foxApp.channelList(userInfo.id);
          console.log(channelList, 222);
          if (channelList.length > 0) {
            let obj = channelList[1];
            let { group_jid } = obj;
            await foxApp.sendMessage({
              to_jid: group_jid, account_id: userInfo.account_id,
              body: { "type": "message", "text": `message from command ${command}` },
              header: { text: 'fox reply' }
            });
          }
        }
        catch (e) {
          console.log(e);
        }
        // try {
        //   await zoomBot.triggerHelp(account_id, to_jid);
        // } catch (e) {
        //   console.log(e);
        // }
      });
    });
  });


  describe('action',async function(){
    it('request',async function(){

      setting.debug(true);
      
      let foxApp = zoomBot.create({ auth: oauth2Client.connect() });
      try{
        await foxApp.request({
          path: '/v2/groups/dsjkf99',
          method:'post'
        },'credential');
      }
      catch(e){
        console.log(e);
      }
    });

  });




  describe('wait', async function() {
    await timeout(100000);
  });

  require('./listen.js');

});
